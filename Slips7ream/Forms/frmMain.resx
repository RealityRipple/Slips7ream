<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="ttInfo.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>130, 17</value>
  </metadata>
  <metadata name="imlUpdates.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="cmbPriority.ToolTip" xml:space="preserve">
    <value>Choose a SLIPS7REAM work priority.

Realtime:
   SLIPS7REAM will have the highest possible priority.
   This can cause other applications to hang or your computer to become unresponsive.
High:
   SLIPS7REAM will be in the top priority list, using all available processor time.
Above Normal:
   SLIPS7REAM will take priority over normal tasks without interfering with higher priority processes.
Normal:
   The default priority value.
Below Normal:
   SLIPS7REAM will allow other processes to take precedence.
   This option is best if you want SLIPS7REAM to run in the background.
Low:
   SLIPS7REAM will only run on idle time, and will be pre-empted by normal program use.

CAUTION: Use extreme care when specifying High or Realtime.
The threads of a process with RealTime priority preempt the threads of all other processes,
including operating system processes performing important tasks,
and can cause disk caches not to flush or cause the mouse to be unresponsive. </value>
  </data>
  <data name="cmbLimitType.ToolTip" xml:space="preserve">
    <value>If you need to split up the WIM or ISO Images into smaller files
to conform to File System limits or disc capacities, you can do so here.

Single File:
   The Image is untouched and may grow to any size.
Split WIM:
   The WIM Package is split into multiple pieces of a specified size.
Split ISO:
   The WIM Pacakage and ISO Image are split into multiple pieces of a specified size.
   Note that the WIM files will be about 350 MB smaller than the size you specify,
   allowing for other data on the first disc.

(Split ISO is only an option if saving to an ISO.)</value>
  </data>
  <data name="cmbISOFormat.ToolTip" xml:space="preserve">
    <value>File System to use for writing ISO.
If your INSTALL.WIM is larger than 4 GB, please use a UDF File System.

ISO 9960:
   Standard format. Limited file name conventions.
Joliet:
   Joliet extension of ISO 9960, endorsed by Microsoft. Enhanced file name capabilities.
UDF:
   Universal Disk Format, or ISO/IEC 13346. Superior standard, but less compatible. Large file sizes.
UDF 1.02:
   Legacy UDF understood by most drives. Compatible with old hardware.

(Items marked with "/ISO 9960" employ a backup format using
the ISO 9960 standard when the selected format can't be read.)</value>
  </data>
  <data name="chkUEFI.ToolTip" xml:space="preserve">
    <value>Enable Unified Extensible Firmware Interface compatibility,
which may be necessary for newer systems (particularly machines that came with Windows 8).

UEFI requires a 64-bit Operating System, so please only use x64 Image Packages with UEFI.

UEFI requires a custom Video Card driver which is only built for Windows 8,
so please enable your UEFI's compatibility module to allow Windows 7 access to the video card.</value>
  </data>
  <data name="cmbLimit.ToolTip" xml:space="preserve">
    <value>Enter a maximum size for the Image. All sizes will be converted to MegaBytes.

700 MB: Standard size for CD. This option usually ends up with two WIMs on each data ISO.¹
4095 MB: Maximum file size for FAT32 file systems. Listed only under Split WIM.
4700 MB: Standard size for DVDs.
8500 MB: Standard size for Dual-Layer DVDs.

If UEFI Boot is enabled, the maximum limit of 4095 MB will be set on any WIM files regardless of this setting.

¹If multiple WIMs fit on one ISO, ISOs will be labeled by the first WIM on the disc (which is the disc number that the Windows 7 Installer will ask for). This may result in a strange number system where you have Disc 1, 2, 4, and 6, but no Disc 3 or 5.</value>
  </data>
  <metadata name="tmrUpdateCheck.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>211, 17</value>
  </metadata>
  <metadata name="tmrAnimation.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>355, 17</value>
  </metadata>
  <metadata name="mnuOutput.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>482, 17</value>
  </metadata>
  <metadata name="tmrCountdown.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>597, 17</value>
  </metadata>
  <metadata name="tmrQuickWait.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>731, 17</value>
  </metadata>
</root>